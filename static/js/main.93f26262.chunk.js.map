{"version":3,"sources":["redux/utils.js","redux/calculatorSlice.js","redux/constructionSlice.js","redux/reduxStore.js","components/Calculator/DropArea.jsx","components/Display/Display.js","components/Numbers/Numbers.js","components/Operators/Operators.js","components/ResultButton/ResultButton.js","components/ConstructionKit/ConstructionKit.jsx","components/Calculator/Calculator.jsx","components/Switcher/Switcher.js","App.js","index.js"],"names":["toLogic","str","parseFloat","replace","toDisplay","num","String","toFixed","calculatorSlice","createSlice","name","initialState","currentValue","displayValue","result","operation","waiting","ready","dotAllowed","reducers","pressNumber","state","action","payload","plus","minus","multi","degree","define","getValue","calculator","oper","actions","constructionSlice","constructionMode","layout","grabbed","switchMode","removeElement","splice","addElement","grab","selectConstructionMode","construction","selectLayout","store","configureStore","reducer","DropArea","children","index","setOver","over","dropable","constructor","dispatch","useDispatch","useState","dragOver","setDragOver","className","classNames","onDoubleClick","onDragEnter","onDragOver","e","preventDefault","onDragLeave","onDrop","draggable","src","alt","Display","useSelector","value","length","numbers","Numbers","isDotAllowed","map","item","onClick","number","Operators","onClickHandler","ResultButton","constuctor","KIT","component","KitItem","used","dragged","setDragged","dragHandler","element","onDragStart","onDragEnd","ConstructionKit","includes","Calculator","dragEl","overEl","setOverEl","find","el","Switcher","onSwitch","width","height","viewBox","fill","xmlns","d","stroke","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93f26262.chunk.js","sourcesContent":["export const toLogic = (str) => {\r\n    return parseFloat(str.replace(',','.'))\r\n}\r\n\r\nexport const toDisplay = (num) => {\r\n    return String(parseFloat(num.toFixed(num > 1 ? 3 : 6))).replace('.',',')\r\n}\r\n\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { toDisplay, toLogic } from \"./utils\";\r\n\r\nconst initialState = {\r\n    currentValue: 0,\r\n    displayValue: 0,\r\n    result: 0,\r\n    operation: null,\r\n    waiting: true,\r\n    ready: true,\r\n    dotAllowed: true\r\n}\r\n\r\nexport const calculatorSlice = createSlice({\r\n    name: 'calculator',\r\n    initialState,\r\n    reducers: {\r\n        pressNumber: (state, action) => {\r\n            if(state.ready){\r\n                state.operation = null\r\n                state.result = 0\r\n                state.ready = false\r\n            }\r\n            if(state.waiting || state.currentValue == 0){\r\n                if(action.payload == ','){\r\n                    state.currentValue = '0,';\r\n                    state.dotAllowed = false\r\n                } else {\r\n                    state.currentValue = action.payload;\r\n                }\r\n                state.displayValue = state.currentValue;\r\n                state.waiting = false;    \r\n            } else {\r\n                if(action.payload == ','){\r\n                    state.dotAllowed = false\r\n                }\r\n                state.currentValue = state.currentValue+action.payload;\r\n                state.displayValue = state.currentValue\r\n            }\r\n        },\r\n\r\n        plus: (state) => {\r\n            if(\r\n                state.currentValue || state.result\r\n            ){\r\n                if(state.ready){\r\n                    state.ready = false\r\n                }\r\n                if(!state.operation){\r\n                    state.operation = '+';\r\n                    state.result = toLogic(state.currentValue)\r\n                    state.currentValue = null\r\n                    state.waiting = true;\r\n                    state.dotAllowed = true\r\n                } else if(state.waiting){\r\n                    state.operation = '+';\r\n                    state.currentValue = null\r\n                } else {\r\n                    switch(state.operation){\r\n                        case '+':\r\n                            state.result = state.result + toLogic(state.currentValue)\r\n                            break\r\n                        case '-':\r\n                            state.result = state.result - toLogic(state.currentValue)\r\n                            break\r\n                        case 'x':\r\n                            state.result = state.result * toLogic(state.currentValue)\r\n                            break\r\n                        case '/':\r\n                            state.result = state.result / toLogic(state.currentValue)\r\n                            break\r\n                    }\r\n\r\n                    state.displayValue = toDisplay(state.result)\r\n                    state.operation = '+';\r\n                    state.waiting = true;\r\n                    state.dotAllowed = true\r\n            }}\r\n        },\r\n\r\n        minus: (state) => {\r\n            if(\r\n                state.currentValue || state.result\r\n            ){\r\n                if(state.ready){\r\n                    state.ready = false\r\n                }\r\n                if(!state.operation){\r\n                    state.operation = '-';\r\n                    state.result = toLogic(state.currentValue);\r\n                    state.currentValue = null\r\n                    state.waiting = true;\r\n                    state.dotAllowed = true\r\n                } else if(state.waiting){\r\n                    state.operation = '-';\r\n                    state.currentValue = null\r\n                } else {\r\n                    switch(state.operation){\r\n                        case '+':\r\n                            state.result = state.result + toLogic(state.currentValue)\r\n                            break\r\n                        case '-':\r\n                            state.result = state.result - toLogic(state.currentValue)\r\n                            break\r\n                        case 'x':\r\n                            state.result = state.result * toLogic(state.currentValue)\r\n                            break\r\n                        case '/':\r\n                            state.result = state.result / toLogic(state.currentValue)\r\n                            break\r\n                    }\r\n                    state.displayValue = toDisplay(state.result)\r\n                    state.operation = '-';\r\n                    state.waiting = true;\r\n                    state.dotAllowed = true\r\n            }}\r\n        },\r\n\r\n        multi: (state) => {\r\n            if(\r\n                state.currentValue || state.result\r\n            ){\r\n                if(state.ready){\r\n                    state.ready = false\r\n                }\r\n                if(!state.operation){\r\n                    state.operation = 'x';\r\n                    state.result = toLogic(state.currentValue);\r\n                    state.currentValue = null\r\n                    state.waiting = true;\r\n                    state.dotAllowed = true\r\n                } else if(state.waiting){\r\n                    state.operation = 'x';\r\n                    state.currentValue = null\r\n                } else {\r\n                    switch(state.operation){\r\n                        case '+':\r\n                            state.result = state.result + toLogic(state.currentValue)\r\n                            break\r\n                        case '-':\r\n                            state.result = state.result - toLogic(state.currentValue)\r\n                            break\r\n                        case 'x':\r\n                            state.result = state.result * toLogic(state.currentValue)\r\n                            break\r\n                        case '/':\r\n                            state.result = state.result / toLogic(state.currentValue)\r\n                            break\r\n                    }\r\n                    state.displayValue = toDisplay(state.result)\r\n                    state.operation = 'x';\r\n                    state.waiting = true;\r\n                    state.dotAllowed = true\r\n            }}\r\n        },\r\n        degree: (state) => {\r\n            if(\r\n                state.currentValue || state.result\r\n            ){\r\n                if(state.ready){\r\n                    state.ready = false\r\n                }\r\n                if(!state.operation){\r\n                    state.operation = '/';\r\n                    state.result = toLogic(state.currentValue);\r\n                    state.currentValue = null\r\n                    state.waiting = true;\r\n                    state.dotAllowed = true\r\n                } else if(state.waiting){\r\n                    state.operation = '/';\r\n                    state.currentValue = null\r\n                } else {\r\n                    switch(state.operation){\r\n                        case '+':\r\n                            state.result = state.result + toLogic(state.currentValue)\r\n                            break\r\n                        case '-':\r\n                            state.result = state.result - toLogic(state.currentValue)\r\n                            break\r\n                        case 'x':\r\n                            state.result = state.result * toLogic(state.currentValue)\r\n                            break\r\n                        case '/':\r\n                            state.result = state.result / toLogic(state.currentValue)\r\n                            break\r\n                    }\r\n                    state.displayValue = toDisplay(state.result)\r\n                    state.operation = '/';\r\n                    state.waiting = true;\r\n                    state.dotAllowed = true\r\n            }}\r\n        },\r\n\r\n        define: (state) => {\r\n            if( !state.currentValue){\r\n                state.operation = null\r\n                state.displayValue = 0\r\n                state.result = 0\r\n                state.waiting = true\r\n            } else if(state.operation){\r\n                switch(state.operation){\r\n                    case '+':\r\n                        state.result = state.result + toLogic(state.currentValue)\r\n                        break\r\n                    case '-':\r\n                        state.result = state.result - toLogic(state.currentValue)\r\n                        break\r\n                    case 'x':\r\n                        state.result = state.result * toLogic(state.currentValue)\r\n                        break\r\n                    case '/':\r\n                        state.result = state.result / toLogic(state.currentValue)\r\n                        break\r\n                }\r\n\r\n                state.displayValue = toDisplay(state.result)\r\n                state.waiting = true;\r\n                state.dotAllowed = true\r\n            }\r\n            state.ready = true\r\n        },\r\n            \r\n    } \r\n})\r\n\r\nexport const getValue = (state) => state.calculator.displayValue;\r\nexport const dotAllowed = (state) => state.calculator.dotAllowed;\r\nexport const oper = (state) => state.calculator.operation;\r\n\r\nexport const { pressNumber, plus, minus, multi, degree, define } = calculatorSlice.actions;\r\n\r\nexport default calculatorSlice.reducer","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    constructionMode: true,\r\n    layout: [],\r\n    grabbed: null,\r\n\r\n}\r\n\r\nexport const constructionSlice = createSlice({\r\n    name: 'construction',\r\n    initialState,\r\n    reducers: {\r\n       switchMode: (state) => {\r\n           state.constructionMode = !state.constructionMode\r\n       },\r\n       removeElement: (state, action) => {\r\n           state.layout.splice(action.payload, 1)\r\n       },\r\n       addElement: (state, action) => {\r\n           state.layout.splice(action.payload, 0, state.grabbed);\r\n       },\r\n       grab: (state, action) => {\r\n           state.grabbed = action.payload\r\n       },\r\n\r\n    } \r\n})\r\n\r\nexport const selectConstructionMode = (state) => state.construction.constructionMode;\r\nexport const selectLayout = (state) => state.construction.layout;\r\nexport const grabbed = (state) => state.construction.grabbed;\r\n\r\nexport const { switchMode, removeElement, addElement, grab,  } = constructionSlice.actions;\r\n\r\nexport default constructionSlice.reducer","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport calculator from './calculatorSlice'\r\nimport construction from './constructionSlice'\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        calculator,\r\n        construction\r\n    }\r\n})","import React, { useState } from 'react'\r\nimport classNames from 'classnames/bind'\r\nimport { useDispatch } from 'react-redux'\r\nimport { addElement, removeElement } from '../../redux/constructionSlice'\r\n\r\nconst DropArea = ({ children, index, setOver, over, dropable, constructor  }) => {\r\n    const dispatch = useDispatch()\r\n    const [dragOver, setDragOver] = useState(false)\r\n\r\n    const doubleClickHandler = () => {\r\n        dispatch(removeElement(index))\r\n    }\r\n\r\n    const dragEnterHandler = () => {\r\n        setDragOver(true)\r\n        if(setOver){\r\n            setOver(index)\r\n        }\r\n    }\r\n\r\n    const dragLeaveHandler = () => {\r\n        setDragOver(false)\r\n        if(setOver && over === index){\r\n            setOver(null)\r\n        }\r\n    }\r\n\r\n    const dropHandler = () => {\r\n        dispatch(addElement(index))\r\n        setDragOver(false)\r\n        if(setOver){\r\n            setOver(null)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classNames(\"calculator__item\", { 'droparea' :dragOver || !children})}\r\n        \r\n            onDoubleClick = { ()=> constructor && doubleClickHandler()  }\r\n            onDragEnter = { ()=> dropable && dragEnterHandler()}\r\n            onDragOver = { (e) => e.preventDefault() }\r\n            onDragLeave = { ()=> dropable &&  dragLeaveHandler() }\r\n            onDrop = { ()=> dropable && dropHandler() }\r\n\r\n        >\r\n            { (!children || dragOver) && <div className={classNames(\"droparea__field\", {\"droparea__field--targeted\": dragOver}) }>\r\n                <img draggable={false} src=\"/DnD.svg\" alt=\"Drop Here\" />\r\n                <span>Drug and drop</span>\r\n                <p>Drug and drop</p>                                        \r\n            </div>}\r\n            {children}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default DropArea\r\n","import './display.css'\r\nimport React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { getValue, oper } from '../../redux/calculatorSlice'\r\nimport classNames from 'classnames/bind'\r\n\r\nconst Display = () => {\r\n    const operation = useSelector(oper)\r\n    let value = useSelector(getValue)\r\n\r\n    if(value.length > 16) {\r\n        value = \"That's too Huge!\"   \r\n    }\r\n\r\n    return (\r\n        <div className=\"display\">\r\n            <div className={ classNames(\"display__value\", {\"display__value--smallText\" : value.length > 8})}>\r\n                {value}\r\n            </div>\r\n            { operation && <div className=\"display__operation\">{operation}</div> }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Display\r\n","import './numbers.css'\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { dotAllowed, pressNumber } from '../../redux/calculatorSlice'\r\nimport classNames from 'classnames/bind'\r\nimport { selectConstructionMode } from '../../redux/constructionSlice'\r\n\r\nconst numbers = ['9','8','7','6','5','4','3','2','1',',','0']\r\n\r\nconst Numbers = () => {\r\n    const dispatch = useDispatch()\r\n    const isDotAllowed = useSelector(dotAllowed)\r\n    const constructor = useSelector(selectConstructionMode)\r\n\r\n    const press = (number) => {\r\n        if(isDotAllowed || number !== ','){\r\n            dispatch(pressNumber(number))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classNames('numbers', {'edit-mode': constructor})}>\r\n            { \r\n                numbers.map(item => <div className=\"numbers__item\" onClick={()=>press(item)}>{item}</div>)            \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Numbers\r\n","import './operators.css'\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { minus, plus, multi, degree } from '../../redux/calculatorSlice'\r\nimport classNames from 'classnames/bind'\r\nimport { selectConstructionMode } from '../../redux/constructionSlice'\r\n\r\nconst Operators = () => {\r\n    const dispatch = useDispatch()\r\n    const constructor = useSelector(selectConstructionMode)\r\n    const onClickHandler = (action) => {\r\n            dispatch(action())    \r\n    }\r\n\r\n    return (\r\n        <div className={classNames('operators', {'edit-mode': constructor })}>\r\n            <div className=\"operators__item\" onClick={()=>onClickHandler(degree)}>/</div>\r\n\r\n            <div className=\"operators__item\" onClick={()=>onClickHandler(multi)}>X</div>\r\n\r\n            <div className=\"operators__item\" onClick={()=>onClickHandler(minus)}>-</div>\r\n\r\n            <div className=\"operators__item\" onClick={()=>onClickHandler(plus)}>+</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Operators\r\n","import './resultButton.css'\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { define } from '../../redux/calculatorSlice'\r\nimport classNames from 'classnames/bind'\r\nimport { selectConstructionMode } from '../../redux/constructionSlice'\r\n\r\nconst ResultButton = () => {\r\n    const dispatch = useDispatch()\r\n    const constuctor = useSelector(selectConstructionMode)\r\n    return (\r\n        <div className={classNames('resultButton', {'edit-mode': constuctor})} onClick={()=>dispatch(define())}>\r\n            =\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResultButton\r\n","import './constructionKit.css'\r\nimport React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { grab, selectLayout } from '../../redux/constructionSlice'\r\nimport classNames from 'classnames/bind'\r\n\r\nimport Display from '../Display/Display'\r\nimport Numbers from '../Numbers/Numbers'\r\nimport Operators from '../Operators/Operators'\r\nimport ResultButton from '../ResultButton/ResultButton'\r\n\r\nexport const KIT = [\r\n    { name: 'display', component: <Display/> },\r\n    { name: 'operators', component: <Operators/> },\r\n    { name: 'numbers', component: <Numbers/> },\r\n    { name: 'result', component: <ResultButton/> },\r\n]\r\n\r\nconst KitItem = ({name, component, used}) => {\r\n    const dispatch = useDispatch()\r\n    const [dragged, setDragged] = useState(null)\r\n\r\n    const dragHandler = ( element ) => {\r\n            dispatch(grab(element))\r\n            setDragged(element)\r\n    }\r\n\r\n    return (\r\n        <div className={classNames(\"kit__item\", {\"kit__item--used\":used || dragged})} \r\n            draggable={!used}\r\n            onDragStart={(e)=> dragHandler(name)}\r\n            onDragEnd={(e)=> dragHandler(null)}\r\n            >\r\n              {component}\r\n            </div>\r\n    )\r\n}\r\n\r\nconst ConstructionKit = () => {\r\n    const layout = useSelector(selectLayout)\r\n    return (\r\n        <div className=\"kit\">\r\n            {\r\n                KIT.map((element) => <KitItem { ...element } used={layout.includes(element.name)}/> )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConstructionKit\r\n","import './calculator.css'\r\nimport React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport {  grabbed, selectConstructionMode, selectLayout } from '../../redux/constructionSlice'\r\n\r\nimport DropArea from './DropArea'\r\nimport { KIT } from '../ConstructionKit/ConstructionKit'\r\n\r\nconst Calculator = () => {\r\n    const layout = useSelector(selectLayout)\r\n    const constructor = useSelector(selectConstructionMode)\r\n    const dragEl = useSelector(grabbed)\r\n    const [overEl, setOverEl] = useState(null)\r\n\r\n    return (\r\n        <div className=\"calculator\">\r\n            {\r\n              dragEl=='display' && <DropArea index={0} dropable/>\r\n            }\r\n\r\n            {\r\n              layout.map( (item, index) => <DropArea key={index} index={index} setOver={setOverEl} over={overEl} dropable={!(dragEl==='display' || item==='display')} constructor={constructor}>\r\n                                            {KIT.find(el => el.name == item ).component}\r\n                                          </DropArea> )\r\n            }\r\n\r\n            {\r\n              layout.length < 4 && constructor && dragEl!=='display' && overEl===null && <DropArea index={layout.length} dropable/>\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Calculator\r\n","import './switcher.css'\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { selectConstructionMode, switchMode } from '../../redux/constructionSlice'\r\nimport classNames from 'classnames/bind'\r\n\r\nconst Switcher = () => {\r\n    const constructor = useSelector(selectConstructionMode)\r\n    const dispatch = useDispatch()\r\n    const onSwitch = () => dispatch(switchMode())\r\n    \r\n    return (\r\n        <div className='switcher'>\r\n            <div className={classNames('switcher__button', {'switcher__button--active': !constructor})} onClick={constructor && onSwitch}>\r\n                <svg width=\"18\" height=\"14\" viewBox=\"0 0 18 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M10.7678 8.76777C11.2366 8.29893 11.5 7.66304 11.5 7C11.5 6.33696 11.2366 5.70107 10.7678 5.23223C10.2989 4.76339 9.66304 4.5 9 4.5C8.33696 4.5 7.70107 4.76339 7.23223 5.23223C6.76339 5.70107 6.5 6.33696 6.5 7C6.5 7.66304 6.76339 8.29893 7.23223 8.76777C7.70107 9.23661 8.33696 9.5 9 9.5C9.66304 9.5 10.2989 9.23661 10.7678 8.76777Z\" stroke=\"#4D5562\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                    <path d=\"M1.04834 6.99999C2.11001 3.61916 5.26917 1.16666 9.00001 1.16666C12.7317 1.16666 15.89 3.61916 16.9517 6.99999C15.89 10.3808 12.7317 12.8333 9.00001 12.8333C5.26917 12.8333 2.11001 10.3808 1.04834 6.99999Z\" stroke=\"#4D5562\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                </svg>\r\n                Runtime</div>\r\n            <div className={classNames('switcher__button', {'switcher__button--active': constructor})} onClick={!constructor && onSwitch}>\r\n                <svg width=\"14\" height=\"10\" viewBox=\"0 0 14 10\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M4.5 8.33334L1.16666 5.00001L4.5 1.66668M9.5 1.66668L12.8333 5.00001L9.5 8.33334\" stroke=\"#4D5562\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                </svg>\r\n                Constructor\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Switcher\r\n","import './App.css';\nimport React from 'react';\nimport {  useSelector } from 'react-redux';\nimport { selectConstructionMode } from './redux/constructionSlice';\n\nimport Calculator from './components/Calculator/Calculator';\nimport ConstructionKit from './components/ConstructionKit/ConstructionKit';\nimport Switcher from './components/Switcher/Switcher';\n\n\nfunction App() {\n  const constructor = useSelector(selectConstructionMode)\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n\n        { constructor && <ConstructionKit/> }  \n\n        <div className=\"main\">\n          <Switcher />\n          <Calculator />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/reduxStore';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}